//
//  structs.h
//  TwistedMind
//
//  Created by noname on 26/09/17.
//  Copyright (c) 2017 noname. All rights reserved.
//

#include <sys/types.h>

#define DKIOCGETBLOCKSIZE _IOR('d', 24, uint32_t)
#define DKIOCGETBLOCKCOUNT _IOR('d', 25, uint64_t)

#define BLOCKSIZE 8192

#define LWVMOFFSET 0x0
#define LWVMPARTITIONSOFFSET 0x200
#define LWVMPARTITIONENTRYSIZE 0x80

static uint8_t LwVMSignature[] = {0x6A, 0x90, 0x88, 0xCF, 0x8A, 0xFD, 0x63, 0x0A, 0xE3, 0x51, 0xE2, 0x48, 0x87, 0xE0, 0xB9, 0x8B};
static uint8_t LwVMSignature_noCRC[] = {0xB1, 0x89, 0xA5, 0x19, 0x4F, 0x59, 0x4B, 0x1D, 0xAD, 0x44, 0x1E, 0x12, 0x7A, 0xAF, 0x45, 0x39};

typedef struct LwVMPartition {
    
    uint8_t signature[16];
    uint64_t guid[2];
    
    uint64_t firstByte;
    uint64_t lastByte;
    
    uint64_t attributes;
    
    uint16_t name[0x24];
    
} LwVMPartition;

static uint8_t GPTSignature[] = {0x45, 0x46, 0x49, 0x20, 0x50, 0x41, 0x52, 0x54};
static uint8_t GPTHFSSignature[] = {0x00, 0x53, 0x46, 0x48, 0x00, 0x00, 0xAA, 0x11, 0xAA, 0x11, 0x00, 0x30, 0x65, 0x43, 0xEC, 0xAC};
static uint8_t GPTEMFSignature[] = {0x00, 0x46, 0x4D, 0x45, 0x00, 0x00, 0xAA, 0x11, 0xAA, 0x11, 0x00, 0x30, 0x65, 0x43, 0xEC, 0xAC};

#define GPTOFFSET BLOCKSIZE

#define GPTHEADERSIZE 0x5C

typedef struct GPTHeader {
    
    uint8_t signature[8];
    
    uint32_t revision;
    uint32_t header_size;
    
    uint32_t header_crc32;
    
    uint8_t nulls[4];
    
    uint64_t header_block;
    uint64_t secondary_header_block;
    
    uint64_t first_usable_block;
    uint64_t last_usable_block;
    
    uint8_t guid[16];
    
    uint64_t partition_block;
    
    uint32_t num_of_partitions;
    uint32_t partition_size;
    
    uint32_t partition_array_crc32;
    
} GPTHeader;

#define GPTPARTITIONSOFFSET BLOCKSIZE*2
#define GPTPARTITIONENTRYSIZE LWVMPARTITIONENTRYSIZE

typedef struct GPTPartition {
    
    uint8_t signature[16];
    uint64_t guid[2];
    
    uint64_t firstBlock;
    uint64_t lastBlock;
    
    uint64_t attributes;
    
    uint16_t name[0x24];
    
} GPTPartition;

typedef struct GPTPartitionArray {
    
    GPTPartition partition[BLOCKSIZE*2/GPTPARTITIONENTRYSIZE];
    
} GPTPartitionArray;

static uint8_t gpt_partition_name[] = {
    
    0x41, 0x00, 0x70, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x20, 0x00,
    0x48, 0x00, 0x46, 0x00, 0x53, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
